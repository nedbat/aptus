* Bugs

- If client size is queried while minimized, it comes back as zero, and a divide by zero error happens.
- Proper prompting about overwriting existing files.

* Speed

- Multi-threaded to use more than one core.
- Faster epsilon comparison for cycle checking (use tricky int operations...)
    - http://www.cygnus-software.com/papers/comparingfloats/comparingfloats.htm
- Take some more optimizations from Xaos: http://www.delorie.com/gnu/docs/xaos/xaos_29.html
    - Do iterations in batches of 8 to avoid the bailout comparison.
- Optimize boundary.py so we can use it for high iterations
- Boundary checking in C
- Fracint computes the miniter by running the edges (where the min must be), then
    uses it to skip the bailout check until reaching the miniter.

* UI

- Make a window icon.
- Status bar for progress and stats presentation.
- GUI progress indicator.
- Paint partial progress in the window.

* Beauty

+ HSV palette
- Generalized palette specification
- Reading GIMP gradients as palettes
- Xaos palette options:
    - Palette shifting
    - Algorithmic palette
- Rotation (simply store the pixel offsets as dx and dy computed from angle).

* Power

- Editable parameters for things like cycle checking epsilon.
- Refactor mandext.c so that it defines a class, rather than having all those globals.
- Command line invocation (refactor a bunch of stuff)
- Multi-precision floats
- Interruptable rendering: write partial counts (and all other state) to a file and restart.

* Knowledge

- Stats: what's the census of iteration counts in the image?
- Stats: some counters (totaliter) need to be more than 32-bit ints.
+ Better progress reporting for trace_boundary: has to count pixels rather than scanlines.
- Switchable coloring: standard, cycle count, etc.
- Some way of embedding the mandelbrot parameters into the final .PNG, so it can be recreated.

* Done

+ Some kind of progress indicator.
+ Cycle detection
