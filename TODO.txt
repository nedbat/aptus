* V1

+ License.
+ output filename for aptuscmd.
- Sample .aptus files.
- Doc pages (rst2px?)
+ safeeval or json. (safe_eval)
+ Keys working on Linux.
+ Cursors working on Linux.
+ Cursors for Mac.
+ Mac: use apple-key rather than control.
+ Help.
+ Engine extension should be nested in aptus package.
+ Windows kits pre-built.

* V3

- Multi-threading
    + Fix progress reporting: compute_array thinks it knows the total pixels.
    + Proper thread pool for multiple drawing windows.
    + Prevent recursive Yield calls that bork the UI.
    - Keep the UI responsive while computing?
    + Switching away from window in progress then switching back doesn't show updates.
    + Update stats window as drawing progresses.

- Decide on re-entrancy, keep things from getting tangled up.
- Combine pointinfo and stats panel, and add more info to it.
- Maybe a better way to manage all the little windows?
- Finish basic Julia:
    + saving and reading state
    + larger Julia exploration window
    + don't let J do anything in a Julia window
    + YouAreHere is centered incorrectly for a Julia set.
    - Explorer, spawn a Julia, shift-hover in the Julia explorer window changes the mini julia.

* Clean-up

- Use PyMem_Malloc in the extension.

* Bugs

+ Visit the deep tush (narrow horizontal splinter). Drag the image to the right.
    Tiles that should be all black that still have old pixels in them won't
    flood-fill, they paint every scanline.
+ Stats panel can show MAX_INT for min cycles if no cycles
- Somehow I managed to zoom in then zoom out, and ended up outside the legal
    radius and the set disappeared.
- Resizing a window larger, the background shows pixels left over from other windows?
+ If client size is queried while minimized, it comes back as zero, and a divide by zero error happens.
+ Proper prompting about overwriting existing files.
+ If you zoom out too far, boundary tracing makes the whole set disappear.
+ Progress can decide there's 0 sec left, and shows an empty string.
+ When dragging the set, chaotic pixels still onscreen shimmer, prob something
    wrong with the half-pixel offset.
+ If the file-save picker says "PNG", and the filename is "foo.aptus", it should
    save as a .aptus file.
+ In continuous mode, there's a stark ring of radius 8 or so.
+ Dragging in the main window shouldn't change the position in the Julia window.
+ When computing only part of the screen, the percentage complete is wrong b/c
    it thinks we have to recompute all the pixels.
+ Dragging the window confuses the boundary tracer now that edgemin is in.
    se: slow; ne: slow; sw: fast; nw: slow
+ Display the YouAreHere panel.  Zoom way in.  Zoom way out again, the panel doesn't close
    automatically when the view window closes, and looks like it doesn't properly
    clean up unneeded zoom levels in the stack either.

* Speed

+ Multi-threaded to use more than one core.
- Faster epsilon comparison for cycle checking (use tricky int operations...)
    - http://www.cygnus-software.com/papers/comparingfloats/comparingfloats.htm
    - http://lomont.org/Math/Papers/2005/CompareFloat.pdf
- Take some more optimizations from Xaos: http://www.delorie.com/gnu/docs/xaos/xaos_29.html
    - Do iterations in batches of 8 to avoid the bailout comparison.
- Take advantage of symmetry across the x-axis.
- Adaptively choose a number of continuous levels (other than 256) based on the
    actual steps in the palette, etc.
- When dragging the image, keep parts scrolled off-screen, in case they come back.
- What does edge-min do to cycle checks?  It prevents us from finding shorter cycles,
    but does that matter?
x Optimize boundary.py so we can use it for high iterations
+ Boundary checking in C
+ Fracint computes the miniter by running the edges (where the min must be), then
    uses it to skip the bailout check until reaching the miniter.
+ Go through the bitblting python code to see if we can skip some of the steps.
+ A custom coloring endpoint in the engine to replace the multiple numpy operations.
+ When dragging the image, only re-calc the parts that have been exposed.
+ When resizing the window, do similar pixel-retention as when dragging.

* UI

- Use CaptureMouse on dragging to avoid lost drags.
- Status bar for progress and stats presentation.
- GUI progress indicator.
- Palette editor.
- Back button
    - with a list of places you've been (with thumbnails).
- Open command to load aptus state files.
-   and palette files
- Mac: app icon  (if 'wxMac' in wx.PlatformInfo:)
- Custom bookmarks (like the J key).
- Ubuntu: resizing the window tries to recalc as you drag (bad idle handling?)
- Arrow keys for nudging the viewport.
+ Make a window icon.
+ Help
+ Draggable rectangle in addition to click-to-zoom.
+ Multiple windows.
+ Paint partial progress in the window.

* Beauty

- Generalized palette specification
- Xaos palette options:
    - Algorithmic palette
- Add an extra segment to non-cyclic ggr palettes.
- Mirroring non-cyclic palettes.
- Read other palette files:
    - .map (see Gnofract 4D)
    - .cs (see Gnofract 4D)
    - .ugr (see Gnofract 4D)
- More varied palettes.
- Use GEGL to do powerful image stuff? http://gegl.org/
+ HSV palette
+ Hue tweaking: [ and ] adjust the hue throughout the current palette.
+ Rotation (simply store the pixel offsets as dx and dy computed from angle).
+ Continuous coloring (http://linas.org/art-gallery/escape/smooth.html)
+ A palette specification, so the complete specs for a pic can be stored.
+ Try to reduce flicker during palette changing (http://wiki.wxpython.org/index.cgi/DoubleBufferedDrawing)
    When cycling colors, display flashes. (wxWindow::IsDoubleBuffered)
+ Reading GIMP gradients as palettes
+ Palette shifting

* Power

- Editable parameters for things like cycle checking epsilon.
- Multi-precision floats
- Interruptable rendering: write partial counts (and all other state) to a file and restart.
- Save counts in a file so a long compute can then be re-colored easily.
+ Refactor engine.c so that it defines a class, rather than having all those globals.
+ Command line invocation (refactor a bunch of stuff)

* Knowledge

- Stats: what's the census of iteration counts in the image?
- Switchable coloring: standard, cycle count, etc.
+ Stats: some counters (totaliter) need to be more than 32-bit ints.
+ Better progress reporting for trace_boundary: has to count pixels rather than scanlines.
+ Some way of embedding the mandelbrot parameters into the final .PNG, so it can be recreated.
+ A You-Are-Here mini panel showing the general location you are viewing
+   (maybe more than one step's worth).
+ A point-info panel: current position, iteration count, color, palette entry, etc.

* Safety

- A warning when zooming in so far that the precision fails.
- A warning about too many maxedpoints (iter_limit too low).

* Convenience

- Use ez_setup, or eggs, or something to manage the Python dependencies.

* MVC Model
- main mandelbrot
    - center, rotation
    - diameter
    - size
    - iterlimit, bailout
    - continuous
    - warnings: iter-too-low, precision underflow
- palette
    - colors
    - offset
    - density
- undo stack:
    - parameters
    - thumbnail
- you-are-here

* Done

+ Some kind of progress indicator.
+ Cycle detection

The Beauty of Fractals parameters for Fractint v18: http://groups.google.com/group/sci.fractals/browse_thread/thread/e7873432d97aff8/6299651657de38bc?lnk=gst&q=julia+peitgen#6299651657de38bc
